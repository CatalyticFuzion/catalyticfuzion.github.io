
	‚Ä¢	@class og @method som OOP struktur
	‚Ä¢	Gherkin som narrativ beskrivelse
	‚Ä¢	@output som metode-returtype
	‚Ä¢	@dependency for afh√¶ngigheder
	‚Ä¢	[$structured references] i narrative Steps
	‚Ä¢	Expectation: sektion for output-kontrol
	‚Ä¢	Scenario Outline = metode blueprint
	‚Ä¢	(Og vi forbereder os mentalt p√• Feature Outline i fremtiden)

‚∏ª

Opdateret BDD_TDD_Gherkin_Sharp.md (Ny Core Architecture)

# Gherkin# Projekt Setup - Core Architecture

## üß© Gherkin# Grundstruktur

Feature: [Titel p√• funktionalitet]  
[Valgfri beskrivelse af form√•l for hele klassen eller funktionaliteten.]

  Background:
    Given [f√¶lles foruds√¶tninger i [$structured] format]

  Scenario: [Beskrivelse af et konkret scenarie]
    Given [$input_variable]: v√¶rdi
    When [$Service.Method] is called
    Expectation:
      - [$output_variable] = forventet v√¶rdi
      - [$dependency_call] is triggered

  Scenario Outline: [Blueprint for en metode]
    Given [$input_variable]: <parameter>
    When [$Service.Method] is called
    Expectation:
      - [$output_variable] = <expected_result>

    Examples:
      | parameter | expected_result |
      | v√¶rdi1    | resultat1        |
      | v√¶rdi2    | resultat2        |

---

## üß± Grundl√¶ggende Metadata

Alle Gherkin#-filer starter med en `#meta` blok, som definerer arkitekturen.

```gherkin
#meta
@class: ServiceName
@method: MethodName
@input: input1:type, input2:type
@output: ReturnType
@dependency: OtherService.OtherMethod
@language: cs
#meta_end

Forklaringer:
	‚Ä¢	@class: ‚Üí definerer C# klassen.
	‚Ä¢	@method: ‚Üí definerer en metode i klassen.
	‚Ä¢	@input: ‚Üí definerer metodeparametre.
	‚Ä¢	@output: ‚Üí definerer metode-returtypen.
	‚Ä¢	@dependency: ‚Üí deklarerer kald til andre services/metoder.
	‚Ä¢	@language: ‚Üí angiver m√•lsprog (cs, fsharp, dart, etc.)

‚∏ª

üìö Eksempel p√• Gherkin# fil

#meta
@class: UserService
@method: CreateUser
@input: username:text, password:text, email:text
@output: UserProfile
@dependency: EmailService.SendWelcomeEmail
@language: cs
#meta_end

Feature: User Profile Management

Background:
  Given [$Database.Users] is available
  And [$EmailService] is running

Scenario: Create a user and send welcome email
  Given [$username]: "john@example.com"
  And [$password]: "secure123"
  And [$email]: "john@example.com"
  When [$UserService.CreateUser] is called
  Expectation:
    - [$UserProfile.IsCreated] = true
    - [$EmailService.SendWelcomeEmail] is triggered

Scenario Outline: Invalid user creation
  Given [$username]: <username>
  And [$password]: <password>
  When [$UserService.CreateUser] is called
  Expectation:
    - [$UserProfile.IsCreated] = <expected_result>

Examples:
  | username           | password   | expected_result |
  | john@example.com   | secure123  | true            |
  | bad@example.com    | weakpass   | false           |



‚∏ª

‚öôÔ∏è Build og Validation
	‚Ä¢	Hver Gherkin#-fil valideres mod Gherkin# Core Model:
	‚Ä¢	Tjek at @class, @method, @input, @output er til stede.
	‚Ä¢	Tjek at alle [$structured] referencer matcher inputs, outputs eller dependencies.
	‚Ä¢	Parser kan generere:
	‚Ä¢	C# klasser og metoder
	‚Ä¢	MSTest/NUnit testklasser
	‚Ä¢	PlantUML diagrammer
	‚Ä¢	Dokumentation (markdown, HTML)

‚∏ª

üõ†Ô∏è Hook struktur med Embedded Gherkin#

Hooks defineres direkte i C# ved hj√¶lp af narrativ Gherkin gennem attributter.

using MyProject.GherkinDsl;

[Binding]
public class Hooks
{
    [GherkinBeforeScenario("Seed Database")]
    [GherkinGiven("a clean database")]
    [GherkinWhen("the test starts")]
    [GherkinThen("the database should contain default users")]
    public void SeedDatabase()
    {
        // TODO: Seed database
    }

    [GherkinAfterScenario("Clear Database")]
    [GherkinGiven("a test run has ended")]
    [GherkinWhen("cleanup begins")]
    [GherkinThen("the database should be cleared")]
    public void ClearDatabase()
    {
        // TODO: Clear database
    }
}



‚∏ª

‚ú® Gherkin# Core Principper

Element	Betydning
@class	C# Klasse Blueprint
@method	Metode Blueprint
@input/@output	Struktureret metode signatur
@dependency	Strukturering af afh√¶ngigheder
Scenario	En test af √©n metode med konkrete data
Scenario Outline	En Blueprint for metoden, underst√∏ttet af mange examples
Examples	Parametriserede testdata
Expectation	Klar beskrivelse af output-forventninger
[$references]	Maskinl√¶sbare ankre til variabler, metoder og services



‚∏ª

‚úçÔ∏è Konklusion

Gherkin# er en evolution af Gherkin til en komplet krav-, arkitektur-, kode- og test-DSL,
designet til AI-integration, parsergeneration, systemanalyse og DevOps-pipelines.

	